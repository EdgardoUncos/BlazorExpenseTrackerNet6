
@using ChartJs.Blazor.Charts
@using Interfaces
@inject IExpenseService ExpenseService
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.PieChart
@using Model

@if(expenses== null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ChartJs.Blazor.Charts.ChartJsPieChart @ref="_pieChartJs" Config="_config" Width="600" Height="300"></ChartJs.Blazor.Charts.ChartJsPieChart>

    <div class="container">
        <div class="row">
            <div class="col-1">
                <span>Income</span>
            </div>
            <div class="col-2">
                <span>Spense</span>
            </div>
            <div class="col-3">
                <span>Total</span>
            </div>
        </div>
        <div class="row">
            <div class="col-1">
                <span style="font-weight:700;color:green">@string.Format($"${GetTotalIncome().ToString()}")</span>
            </div>
            <div class="col-2">
                <span style="font-weight:700;color:red">@string.Format($"${GetTotalExpenses().ToString()}")</span>
            </div>
            <div class="col-3">
                <span style="font-weight:700;color:@GetTotalColor()">@string.Format($"${GetTotal().ToString()}")</span>
            </div>
        </div>
    </div>
}

@code{

    public IEnumerable<Expense> expenses {get; set;}
    public string Message {get; set;}

    private PieConfig _config;
    private ChartJsPieChart _pieChartJs;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            expenses = await ExpenseService.GetAllExpenses();
        }
        catch (Exception e)
        {

            Message = "Something went wrong..." + e.Message;
        }

        _config = new PieConfig
            {
                Options = new PieOptions
                {
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Expenses"
                    },
                    Responsive = true,
                    Animation = new ArcAnimation
                    {
                        AnimateRotate = true,
                        AnimateScale = true,
                    }
                }
            };

        _config.Data.Labels.AddRange(expenses.Select(c => c.Category.Name).Distinct().ToArray());

        var pieSet = new PieDataset
            {
                BackgroundColor = new[] { "#FF5733", "#33FF57", "#3357FF", "#FF33A1" },
                BorderWidth = 0,
                HoverBackgroundColor = "#AAAAAA",
                HoverBorderColor = "#555555",
                HoverBorderWidth = 1,
                BorderColor = "#FFFFFF"
            };

        pieSet.Data.AddRange(expenses.GroupBy(e => e.CategoryId)
                            .Select(ec => ec.Sum(c => Convert.ToDouble(c.Amount))).ToArray());
        _config.Data.Datasets.Add(pieSet);
    }

    protected decimal GetTotalExpenses()
    {
        return expenses
                    .Where(c => c.ExpenseType == ExpenseType.Expense)
                    .GroupBy(i => 1)
                    .Select(g => new
                    {
                        Amount = g.Sum(i => i.Amount)
                    }).FirstOrDefault().Amount;
    }

    protected decimal GetTotalIncome()
    {
        return expenses
                    .Where(c => c.ExpenseType == ExpenseType.Income)
                    .GroupBy(i => 1)
                    .Select(g => new
                    {
                        Amount = g.Sum(i => i.Amount)
                    }).FirstOrDefault().Amount;
    }

    protected decimal GetTotal()
    {
        return GetTotalIncome() - GetTotalExpenses();
    }

    protected string GetTotalColor()
    {
        return GetTotal() > 0 ? "green" : "red";
    }
}
